language: go
name: go_mysql_conn_raw_passwd
message: "Do not hardcode MySQL passwords in the source code."
category: security
severity: critical
pattern: >
  [
    (call_expression
  function: (selector_expression
    operand: (identifier) @sql
    field: (field_identifier) @method
    (#match? @sql "^sql$")
    (#match? @method "^Open$"))
  arguments: (argument_list
    (interpreted_string_literal) @conn_string
    (#match? @conn_string "^\".*:.*@.*\"$"))) @go_mysql_conn_raw_passwd
  ]
exclude:
  - "test/**"
  - "*_test.go"
  - "tests/**"
  - "__tests__/**"
description: |
    Issue:
    Hardcoding MySQL credentials (such as username and password) in source code is a critical security risk. If the source code is leaked or exposed, attackers can gain unauthorized access to the database.

    Instead of hardcoding credentials, use environment variables or a secret management solution like:

    - Environment Variables: Use os.Getenv("DB_DSN")
    - Secret Management: AWS Secrets Manager, HashiCorp Vault, or Kubernetes Secrets
    - Configuration Files: Use .env files with dotenv (ensure they are not committed to version control)

    Remediation Example:
    func safe_test() {
      // Retrieve configuration from environment variables
      user := os.Getenv("DB_USER")
      if user == "" {
        log.Fatal("Environment variable DB_USER is not set")
      }
      passwd := os.Getenv("DB_PASSWORD")
      if passwd == "" {
        log.Fatal("Environment variable DB_PASSWORD is not set")
      }
      db := os.Getenv("DB_NAME")
      if db == "" {
        log.Fatal("Environment variable DB_NAME is not set")
      }
      host := os.Getenv("DB_HOST")
      if host == "" {
        host = "localhost" // Default value
      }
      port := os.Getenv("DB_PORT")
      if port == "" {
        port = "3306" // Default MySQL port
      }

      // Safe: Construct connection string dynamically
      dataSourceName := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s", user, passwd, host, port, db)
      dbConn, err := sql.Open("mysql", dataSourceName)
      if err != nil {
        log.Fatalf("Failed to open database: %v", err)
      }
      defer dbConn.Close()

      // Test the connection
      err = dbConn.Ping()
      if err != nil {
        log.Fatalf("Failed to ping database: %v", err)
      }

      fmt.Println("Successfully connected to the database!")
    }



