language: javascript
name: jssha_sha1
message: "Avoid using the SHA1 hashing algorithm for sensitive operations. SHA1 is considered weak and vulnerable to collision attacks."
category: security
severity: warning
pattern: >
  (
    (lexical_declaration
      (variable_declarator
        name: (identifier) 
        value: (call_expression
          function: (identifier) @require
          (#eq? @require "require")
          arguments: (arguments
            (string) @arg
            [(
              (#eq? @arg "jssha")
              (#eq? @arg "jssha/sha1")
              (#eq? @arg "jssha/dist/sha1")
            )]
          )
        )
      )
    )
  (expression_statement
    (new_expression
      constructor: (identifier) 
      arguments: (arguments
        (string) @algo . _*
        (#eq? @algo "SHA-1")
      ) 
    ) @jssha_sha1
  )
  )

exclude:
  - "test/**"
  - "*_test.js"
  - "tests/**"
  - "__tests__/**"
description: |
  Issue:
  The SHA1 (Secure Hash Algorithm 1) hashing algorithm is no longer considered secure for several reasons:
    - It is vulnerable to collision attacks, where two different inputs produce the same hash
    - It has been practically broken since 2017 with demonstrated collision attacks
    - It provides only 160-bit output, which is insufficient by modern standards
    - Many security standards and compliance requirements prohibit its use
    
  Using SHA1 for sensitive operations puts your application at risk, especially for:
    - Password hashing
    - Digital signatures
    - Certificate validation
    - Data integrity verification
    
  Remediation:
  ```js
  // Instead of:
  new jsSHA("SHA-1", "TEXT", { encoding: "UTF8" });
    
  // Use SHA-256 or stronger for general hashing:
  new jsSHA("SHA-256", "TEXT", { encoding: "UTF8" });
  // or
  new jsSHA("SHA-512", "TEXT", { encoding: "UTF8" });
    
  // For password hashing specifically, use dedicated algorithms:
  // 1. Argon2id (recommended)
  const argon2 = require('argon2');
  const hash = await argon2.hash(password);
    
  // 2. bcrypt alternative
  const bcrypt = require('bcrypt');
  const hash = await bcrypt.hash(password, 10);
  ```