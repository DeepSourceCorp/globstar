language: ts
name: bypass_assertion
message: Found type assertion being bypassed, assign directly to a typed variable
category: security

pattern: |
  (
    (lexical_declaration
      (variable_declarator 
          value : (as_expression
              (type_identifier) @inter_name
            
            )
        ) 

    ) 
  ) @bypass_assertion

description: |
  Asserting an object containing extra properties (Unsafe Assertions):
  - Incorrect: Type assertion ignores extra properties
     ```ts
     const person = { name: "Alice", age: 30, extra: true } as Person;
     ```
  - Correct: 
     ```ts
     const person : Person = { name: "Alice", age: 30, extra: true };
     ```

  Using type assertions to bypass type checking:
  - Incorrect: Forcing a type assertion with `as` when it's wrong
     ```ts
      let value: unknown = "Hello";
      let num = value as number; // TypeScript allows this, but it results in runtime error
      console.log(num * 2); // Runtime error
      ```
  - Correct: Use proper type checking
    ```ts
      let value: unknown = "Hello";

      if (typeof value === "number") {
          let num: number = value; // Now TypeScript ensures it's correct
      }
      ```

  `Person` is defined as below:
  ```ts
  interface Person {
      name: string;
      age: number;
  }
